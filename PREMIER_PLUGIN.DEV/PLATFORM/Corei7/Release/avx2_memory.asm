; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__security_check_cookie:PROC
PUBLIC	avx2_mem1024_block_clean
PUBLIC	avx2_mem256_block_clean
PUBLIC	avx2_mem_clean
;	COMDAT pdata
pdata	SEGMENT
$pdata$avx2_mem1024_block_clean DD imagerel $LN12
	DD	imagerel $LN12+253
	DD	imagerel $unwind$avx2_mem1024_block_clean
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$avx2_mem256_block_clean DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$avx2_mem256_block_clean
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$avx2_mem256_block_clean DD 020f01H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$avx2_mem1024_block_clean DD 020f01H
	DD	050023206H
xdata	ENDS
; Function compile flags: /Ogtp
; File e:\work\marat\adobe\premier_plugin.dev\imagelabcorei7\src\avx2_memory.cpp
;	COMDAT avx2_mem_clean
_TEXT	SEGMENT
pMem$ = 8
memSize$ = 16
avx2_mem_clean PROC					; COMDAT

; 5    : 
; 6    : }

	ret	0
avx2_mem_clean ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\work\marat\adobe\premier_plugin.dev\imagelabcorei7\src\avx2_memory.cpp
;	COMDAT avx2_mem256_block_clean
_TEXT	SEGMENT
pMem$ = 48
avx2_mem256_block_clean PROC				; COMDAT

; 10   : {

$LN4:
	push	rbp
	sub	rsp, 32					; 00000020H
	lea	rbp, QWORD PTR [rsp+32]
	and	rbp, -32				; ffffffffffffffe0H
	vpxor	xmm0, xmm0, xmm0

; 11   : 	const __m256i zeroVector = _mm256_setzero_si256();
; 12   : 	__m256i* p = reinterpret_cast<__m256i* __restrict>(pMem);
; 13   : 
; 14   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx], ymm0

; 15   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+32], ymm0

; 16   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+64], ymm0

; 17   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+96], ymm0

; 18   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+128], ymm0

; 19   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+160], ymm0

; 20   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+192], ymm0

; 21   : 	_mm256_store_si256(p, zeroVector);

	vmovdqa	YMMWORD PTR [rcx+224], ymm0
	vzeroupper

; 22   : }

	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
avx2_mem256_block_clean ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\work\marat\adobe\premier_plugin.dev\imagelabcorei7\src\avx2_memory.cpp
;	COMDAT avx2_mem1024_block_clean
_TEXT	SEGMENT
pMem$ = 48
avx2_mem1024_block_clean PROC				; COMDAT

; 26   : {

$LN12:
	push	rbp
	sub	rsp, 32					; 00000020H
	lea	rbp, QWORD PTR [rsp+32]
	and	rbp, -32				; ffffffffffffffe0H
	vpxor	xmm0, xmm0, xmm0

; 14   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx], ymm0

; 15   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+32], ymm0

; 16   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+64], ymm0

; 17   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+96], ymm0

; 18   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+128], ymm0

; 19   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+160], ymm0

; 20   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+192], ymm0

; 21   : 	_mm256_store_si256(p, zeroVector);

	vmovdqa	YMMWORD PTR [rcx+224], ymm0

; 14   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+256], ymm0
	lea	rax, QWORD PTR [rcx+288]

; 15   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax], ymm0

; 16   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+32], ymm0

; 17   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+64], ymm0

; 18   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+96], ymm0

; 19   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+128], ymm0

; 20   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+160], ymm0

; 21   : 	_mm256_store_si256(p, zeroVector);

	vmovdqa	YMMWORD PTR [rax+192], ymm0

; 14   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+512], ymm0
	lea	rax, QWORD PTR [rcx+544]

; 15   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax], ymm0

; 16   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+32], ymm0

; 17   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+64], ymm0

; 18   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+96], ymm0

; 19   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+128], ymm0

; 20   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+160], ymm0

; 21   : 	_mm256_store_si256(p, zeroVector);

	vmovdqa	YMMWORD PTR [rax+192], ymm0

; 14   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rcx+768], ymm0
	lea	rax, QWORD PTR [rcx+800]

; 15   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax], ymm0

; 16   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+32], ymm0

; 17   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+64], ymm0

; 18   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+96], ymm0

; 19   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+128], ymm0

; 20   : 	_mm256_store_si256(p, zeroVector), p++;

	vmovdqa	YMMWORD PTR [rax+160], ymm0

; 21   : 	_mm256_store_si256(p, zeroVector);

	vmovdqa	YMMWORD PTR [rax+192], ymm0
	vzeroupper

; 27   : 	avx2_mem256_block_clean(pMem);
; 28   : 	avx2_mem256_block_clean(reinterpret_cast<void* __restrict>((reinterpret_cast<__m256i* __restrict>(pMem)) + 8));
; 29   : 	avx2_mem256_block_clean(reinterpret_cast<void* __restrict>((reinterpret_cast<__m256i* __restrict>(pMem)) + 16));
; 30   : 	avx2_mem256_block_clean(reinterpret_cast<void* __restrict>((reinterpret_cast<__m256i* __restrict>(pMem)) + 24));
; 31   : }

	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
avx2_mem1024_block_clean ENDP
_TEXT	ENDS
END
