#ifndef __IMAGE_LAB_RETRO_VISION_PALETTE_VGA_VALUES__
#define __IMAGE_LAB_RETRO_VISION_PALETTE_VGA_VALUES__

#include "PaletteEntry.hpp"
#include <cstdint>
#include <array>

constexpr int32_t VGA16_width  = 640;
constexpr int32_t VGA16_height = 480;

constexpr int32_t VGA256_width  = 320;
constexpr int32_t VGA256_height = 200;

using VGA_Palette16  = std::array<PEntry<uint8_t>, 16 >;
using VGA_Palette256 = std::array<PEntry<uint8_t>, 256>;

using VGA_Palette16F32  = std::array<PEntry<float>, 16 >;
using VGA_Palette256F32 = std::array<PEntry<float>, 256>;

// VGA standard 16 colors palette
CACHE_ALIGN constexpr VGA_Palette16 VGA_Standard16_u8 =
{{
    {   0,   0,   0 }, // Black
    {   0,   0, 170 }, // Blue
    {   0, 170,   0 }, // Green
    {   0, 170, 170 }, // Cyan
    { 170,   0,   0 }, // Red
    { 170,   0, 170 }, // Magenta
    { 170,  85,   0 }, // Brown / Dark Yellow 
    { 170, 170, 170 }, // Light Gray
    {  85,  85,  85 }, // Dark Gray
    {  85,  85, 255 }, // Bright Blue
    {  85, 255,  85 }, // Bright Green
    {  85, 255, 255 }, // Bright Cyan
    { 255,  85,  85 }, // Bright Red
    { 255,  85, 255 }, // Bright Magenta
    { 255, 255,  85 }, // Yellow
    { 255, 255, 255 }  // White
}};

CACHE_ALIGN constexpr VGA_Palette16F32 VGA_Standard16_f32 =
{{
    { static_cast<float>(VGA_Standard16_u8[0 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[0 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[0 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[1 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[1 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[1 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[2 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[2 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[2 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[3 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[3 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[3 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[4 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[4 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[4 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[5 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[5 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[5 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[6 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[6 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[6 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[7 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[7 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[7 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[8 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[8 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[8 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[9 ].r) / 255.f, static_cast<float>(VGA_Standard16_u8[9 ].g) / 255.f, static_cast<float>(VGA_Standard16_u8[9 ].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[10].r) / 255.f, static_cast<float>(VGA_Standard16_u8[10].g) / 255.f, static_cast<float>(VGA_Standard16_u8[10].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[11].r) / 255.f, static_cast<float>(VGA_Standard16_u8[11].g) / 255.f, static_cast<float>(VGA_Standard16_u8[11].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[12].r) / 255.f, static_cast<float>(VGA_Standard16_u8[12].g) / 255.f, static_cast<float>(VGA_Standard16_u8[12].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[13].r) / 255.f, static_cast<float>(VGA_Standard16_u8[13].g) / 255.f, static_cast<float>(VGA_Standard16_u8[13].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[14].r) / 255.f, static_cast<float>(VGA_Standard16_u8[14].g) / 255.f, static_cast<float>(VGA_Standard16_u8[14].b) / 255.f },
    { static_cast<float>(VGA_Standard16_u8[15].r) / 255.f, static_cast<float>(VGA_Standard16_u8[15].g) / 255.f, static_cast<float>(VGA_Standard16_u8[15].b) / 255.f },
}};



// VGA 256 colors palette (Mode 13)
CACHE_ALIGN constexpr VGA_Palette256 VGA_Standard256_u8 =
{{ // Let's use Windows-95 color schema
    {   0,   0,   0 },
    { 128,   0,   0 },
    {   0, 128,   0 },
    { 128, 128,   0 },
    {   0,   0, 128 },
    { 128,   0, 128 },
    {   0, 128, 128 },
    { 192, 192, 192 },
    { 192, 220, 192 },
    { 166, 202, 240 },
    {  42,  63, 170 },
    {  42,  63, 255 },
    {  42,  95,   0 },
    {  42,  95,  85 },
    {  42,  95, 170 },
    {  42,  95, 255 },
    {  42, 127,   0 },
    {  42, 127,  85 },
    {  42, 127, 170 },
    {  42, 127, 255 },
    {  42, 159,   0 },
    {  42, 159,  85 },
    {  42, 159, 170 },
    {  42, 159, 255 },
    {  42, 191,   0 },
    {  42, 191,  85 },
    {  42, 191, 170 },
    {  42, 191, 255 },
    {  42, 223,   0 },
    {  42, 223,  85 },
    {  42, 223, 170 },
    {  42, 223, 255 },
    {  42, 255,   0 },
    {  42, 255,  85 },
    {  42, 255, 170 },
    {  42, 255, 255 },
    {  85,   0,   0 },
    {  85,   0,  85 },
    {  85,   0, 170 },
    {  85,   0, 255 },
    {  85,  31,   0 },
    {  85,  31,  85 },
    {  85,  31, 170 },
    {  85,  31, 255 },
    {  85,  63,   0 },
    {  85,  63,  85 },
    {  85,  63, 170 },
    {  85,  63, 255 },
    {  85,  95,   0 },
    {  85,  95,  85 },
    {  85,  95, 170 },
    {  85,  95, 255 },
    {  85, 127,   0 },
    {  85, 127,  85 },
    {  85, 127, 170 },
    {  85, 127, 255 },
    {  85, 159,   0 },
    {  85, 159,  85 },
    {  85, 159, 170 },
    {  85, 159, 255 },
    {  85, 191,   0 },
    {  85, 191,  85 },
    {  85, 191, 170 },
    {  85, 191, 255 },
    {  85, 223,   0 },
    {  85, 223,  85 },
    {  85, 223, 170 },
    {  85, 223, 255 },
    {  85, 255,   0 },
    {  85, 255,  85 },
    {  85, 255, 170 },
    {  85, 255, 255 },
    { 127,   0,   0 },
    { 127,   0,  85 },
    { 127,   0, 170 },
    { 127,   0, 255 },
    { 127,  31,   0 },
    { 127,  31,  85 },
    { 127,  31, 170 },
    { 127,  31, 255 },
    { 127,  63,   0 },
    { 127,  63,  85 },
    { 127,  63, 170 },
    { 127,  63, 255 },
    { 127,  95,   0 },
    { 127,  95,  85 },
    { 127,  95, 170 },
    { 127,  95, 255 },
    { 127, 127,   0 },
    { 127, 127,  85 },
    { 127, 127, 170 },
    { 127, 127, 255 },
    { 127, 159,   0 },
    { 127, 159,  85 },
    { 127, 159, 170 },
    { 127, 159, 255 },
    { 127, 191,   0 },
    { 127, 191,  85 },
    { 127, 191, 170 },
    { 127, 191, 255 },
    { 127, 223,   0 },
    { 127, 223,  85 },
    { 127, 223, 170 },
    { 127, 223, 255 },
    { 127, 255,   0 },
    { 127, 255,  85 },
    { 127, 255, 170 },
    { 127, 255, 255 },
    { 170,   0,   0 },
    { 170,   0,  85 },
    { 170,   0, 170 },
    { 170,   0, 255 },
    { 170,  31,   0 },
    { 170,  31,  85 },
    { 170,  31, 170 },
    { 170,  31, 255 },
    { 170,  63,   0 },
    { 170,  63,  85 },
    { 170,  63, 170 },
    { 170,  63, 255 },
    { 170,  95,   0 },
    { 170,  95,  85 },
    { 170,  95, 170 },
    { 170,  95, 255 },
    { 170, 127,   0 },
    { 170, 127,  85 },
    { 170, 127, 170 },
    { 170, 127, 255 },
    { 170, 159,   0 },
    { 170, 159,  85 },
    { 170, 159, 170 },
    { 170, 159, 255 },
    { 170, 191,   0 },
    { 170, 191,  85 },
    { 170, 191, 170 },
    { 170, 191, 255 },
    { 170, 223,   0 },
    { 170, 223,  85 },
    { 170, 223, 170 },
    { 170, 223, 255 },
    { 170, 255,   0 },
    { 170, 255,  85 },
    { 170, 255, 170 },
    { 170, 255, 255 },
    { 212,   0,   0 },
    { 212,   0,  85 },
    { 212,   0, 170 },
    { 212,   0, 255 },
    { 212,  31,   0 },
    { 212,  31,  85 },
    { 212,  31, 170 },
    { 212,  31, 255 },
    { 212,  63,   0 },
    { 212,  63,  85 },
    { 212,  63, 170 },
    { 212,  63, 255 },
    { 212,  95,   0 },
    { 212,  95,  85 },
    { 212,  95, 170 },
    { 212,  95, 255 },
    { 212, 127,   0 },
    { 212, 127,  85 },
    { 212, 127, 170 },
    { 212, 127, 255 },
    { 212, 159,   0 },
    { 212, 159,  85 },
    { 212, 159, 170 },
    { 212, 159, 255 },
    { 212, 191,   0 },
    { 212, 191,  85 },
    { 212, 191, 170 },
    { 212, 191, 255 },
    { 212, 223,   0 },
    { 212, 223,  85 },
    { 212, 223, 170 },
    { 212, 223, 255 },
    { 212, 255,   0 },
    { 212, 255,  85 },
    { 212, 255, 170 },
    { 212, 255, 255 },
    { 255,   0,  85 },
    { 255,   0, 170 },
    { 255,  31,   0 },
    { 255,  31,  85 },
    { 255,  31, 170 },
    { 255,  31, 255 },
    { 255,  63,   0 },
    { 255,  63,  85 },
    { 255,  63, 170 },
    { 255,  63, 255 },
    { 255,  95,   0 },
    { 255,  95,  85 },
    { 255,  95, 170 },
    { 255,  95, 255 },
    { 255, 127,   0 },
    { 255, 127,  85 },
    { 255, 127, 170 },
    { 255, 127, 255 },
    { 255, 159,   0 },
    { 255, 159,  85 },
    { 255, 159, 170 },
    { 255, 159, 255 },
    { 255, 191,   0 },
    { 255, 191,  85 },
    { 255, 191, 170 },
    { 255, 191, 255 },
    { 255, 223,   0 },
    { 255, 223,  85 },
    { 255, 223, 170 },
    { 255, 223, 255 },
    { 255, 255,  85 },
    { 255, 255, 170 },
    { 204, 204, 255 },
    { 255, 204, 255 },
    {  51, 255, 255 },
    { 102, 255, 255 },
    { 153, 255, 255 },
    { 204, 255, 255 },
    {   0, 127,   0 },
    {   0, 127,  85 },
    {   0, 127, 170 },
    {   0, 127, 255 },
    {   0, 159,   0 },
    {   0, 159,  85 },
    {   0, 159, 170 },
    {   0, 159, 255 },
    {   0, 191,   0 },
    {   0, 191,  85 },
    {   0, 191, 170 },
    {   0, 191, 255 },
    {   0, 223,   0 },
    {   0, 223,  85 },
    {   0, 223, 170 },
    {   0, 223, 255 },
    {   0, 255,  85 },
    {   0, 255, 170 },
    {  42,   0,   0 },
    {  42,   0,  85 },
    {  42,   0, 170 },
    {  42,   0, 255 },
    {  42,  31,   0 },
    {  42,  31,  85 },
    {  42,  31, 170 },
    {  42,  31, 255 },
    {  42,  63,   0 },
    {  42,  63,  85 },
    { 255, 251, 240 },
    { 160, 160, 164 },
    { 128, 128, 128 },
    { 255,   0,   0 },
    {   0, 255,   0 },
    { 255, 255,   0 },
    {   0,   0, 255 },
    { 255,   0, 255 },
    {   0, 255, 255 },
    { 255, 255, 255 }

}};

CACHE_ALIGN constexpr VGA_Palette256F32 VGA_Standard256_f32 =
{{
    { static_cast<float>(VGA_Standard256_u8[0  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[0  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[0  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[1  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[1  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[1  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[2  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[2  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[2  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[3  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[3  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[3  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[4  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[4  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[4  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[5  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[5  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[5  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[6  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[6  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[6  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[7  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[7  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[7  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[8  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[8  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[8  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[9  ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[9  ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[9  ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[10 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[10 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[10 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[11 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[11 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[11 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[12 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[12 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[12 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[13 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[13 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[13 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[14 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[14 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[14 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[15 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[15 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[15 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[16 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[16 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[16 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[17 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[17 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[17 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[18 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[18 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[18 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[19 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[19 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[19 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[20 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[20 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[20 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[21 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[21 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[21 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[22 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[22 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[22 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[23 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[23 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[23 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[24 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[24 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[24 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[25 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[25 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[25 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[26 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[26 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[26 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[27 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[27 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[27 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[28 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[28 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[28 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[29 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[29 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[29 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[30 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[30 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[30 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[31 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[31 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[31 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[32 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[32 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[32 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[33 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[33 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[33 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[34 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[34 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[34 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[35 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[35 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[35 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[36 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[36 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[36 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[37 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[37 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[37 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[38 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[38 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[38 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[39 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[39 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[39 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[40 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[40 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[40 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[41 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[41 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[41 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[42 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[42 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[42 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[43 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[43 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[43 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[44 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[44 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[44 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[45 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[45 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[45 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[46 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[46 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[46 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[47 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[47 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[47 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[48 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[48 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[48 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[49 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[49 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[49 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[50 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[50 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[50 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[51 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[51 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[51 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[52 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[52 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[52 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[53 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[53 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[53 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[54 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[54 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[54 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[55 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[55 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[55 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[56 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[56 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[56 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[57 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[57 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[57 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[58 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[58 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[58 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[59 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[59 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[59 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[60 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[60 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[60 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[61 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[61 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[61 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[62 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[62 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[62 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[63 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[63 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[63 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[64 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[64 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[64 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[65 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[65 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[65 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[66 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[66 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[66 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[67 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[67 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[67 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[68 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[68 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[68 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[69 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[69 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[69 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[70 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[70 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[70 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[71 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[71 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[71 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[72 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[72 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[72 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[73 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[73 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[73 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[74 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[74 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[74 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[75 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[75 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[75 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[76 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[76 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[76 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[77 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[77 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[77 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[78 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[78 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[78 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[79 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[79 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[79 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[80 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[80 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[80 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[81 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[81 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[81 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[82 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[82 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[82 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[83 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[83 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[83 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[84 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[84 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[84 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[85 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[85 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[85 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[86 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[86 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[86 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[87 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[87 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[87 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[88 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[88 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[88 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[89 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[89 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[89 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[90 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[90 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[90 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[91 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[91 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[91 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[92 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[92 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[92 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[93 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[93 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[93 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[94 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[94 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[94 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[95 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[95 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[95 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[96 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[96 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[96 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[97 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[97 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[97 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[98 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[98 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[98 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[99 ].r) / 255.f, static_cast<float>(VGA_Standard256_u8[99 ].g) / 255.f, static_cast<float>(VGA_Standard256_u8[99 ].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[100].r) / 255.f, static_cast<float>(VGA_Standard256_u8[100].g) / 255.f, static_cast<float>(VGA_Standard256_u8[100].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[101].r) / 255.f, static_cast<float>(VGA_Standard256_u8[101].g) / 255.f, static_cast<float>(VGA_Standard256_u8[101].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[102].r) / 255.f, static_cast<float>(VGA_Standard256_u8[102].g) / 255.f, static_cast<float>(VGA_Standard256_u8[102].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[103].r) / 255.f, static_cast<float>(VGA_Standard256_u8[103].g) / 255.f, static_cast<float>(VGA_Standard256_u8[103].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[104].r) / 255.f, static_cast<float>(VGA_Standard256_u8[104].g) / 255.f, static_cast<float>(VGA_Standard256_u8[104].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[105].r) / 255.f, static_cast<float>(VGA_Standard256_u8[105].g) / 255.f, static_cast<float>(VGA_Standard256_u8[105].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[106].r) / 255.f, static_cast<float>(VGA_Standard256_u8[106].g) / 255.f, static_cast<float>(VGA_Standard256_u8[106].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[107].r) / 255.f, static_cast<float>(VGA_Standard256_u8[107].g) / 255.f, static_cast<float>(VGA_Standard256_u8[107].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[108].r) / 255.f, static_cast<float>(VGA_Standard256_u8[108].g) / 255.f, static_cast<float>(VGA_Standard256_u8[108].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[109].r) / 255.f, static_cast<float>(VGA_Standard256_u8[109].g) / 255.f, static_cast<float>(VGA_Standard256_u8[109].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[110].r) / 255.f, static_cast<float>(VGA_Standard256_u8[110].g) / 255.f, static_cast<float>(VGA_Standard256_u8[110].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[111].r) / 255.f, static_cast<float>(VGA_Standard256_u8[111].g) / 255.f, static_cast<float>(VGA_Standard256_u8[111].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[112].r) / 255.f, static_cast<float>(VGA_Standard256_u8[112].g) / 255.f, static_cast<float>(VGA_Standard256_u8[112].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[113].r) / 255.f, static_cast<float>(VGA_Standard256_u8[113].g) / 255.f, static_cast<float>(VGA_Standard256_u8[113].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[114].r) / 255.f, static_cast<float>(VGA_Standard256_u8[114].g) / 255.f, static_cast<float>(VGA_Standard256_u8[114].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[115].r) / 255.f, static_cast<float>(VGA_Standard256_u8[115].g) / 255.f, static_cast<float>(VGA_Standard256_u8[115].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[116].r) / 255.f, static_cast<float>(VGA_Standard256_u8[116].g) / 255.f, static_cast<float>(VGA_Standard256_u8[116].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[117].r) / 255.f, static_cast<float>(VGA_Standard256_u8[117].g) / 255.f, static_cast<float>(VGA_Standard256_u8[117].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[118].r) / 255.f, static_cast<float>(VGA_Standard256_u8[118].g) / 255.f, static_cast<float>(VGA_Standard256_u8[118].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[119].r) / 255.f, static_cast<float>(VGA_Standard256_u8[119].g) / 255.f, static_cast<float>(VGA_Standard256_u8[119].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[120].r) / 255.f, static_cast<float>(VGA_Standard256_u8[120].g) / 255.f, static_cast<float>(VGA_Standard256_u8[120].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[121].r) / 255.f, static_cast<float>(VGA_Standard256_u8[121].g) / 255.f, static_cast<float>(VGA_Standard256_u8[121].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[122].r) / 255.f, static_cast<float>(VGA_Standard256_u8[122].g) / 255.f, static_cast<float>(VGA_Standard256_u8[122].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[123].r) / 255.f, static_cast<float>(VGA_Standard256_u8[123].g) / 255.f, static_cast<float>(VGA_Standard256_u8[123].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[124].r) / 255.f, static_cast<float>(VGA_Standard256_u8[124].g) / 255.f, static_cast<float>(VGA_Standard256_u8[124].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[125].r) / 255.f, static_cast<float>(VGA_Standard256_u8[125].g) / 255.f, static_cast<float>(VGA_Standard256_u8[125].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[126].r) / 255.f, static_cast<float>(VGA_Standard256_u8[126].g) / 255.f, static_cast<float>(VGA_Standard256_u8[126].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[127].r) / 255.f, static_cast<float>(VGA_Standard256_u8[127].g) / 255.f, static_cast<float>(VGA_Standard256_u8[127].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[128].r) / 255.f, static_cast<float>(VGA_Standard256_u8[128].g) / 255.f, static_cast<float>(VGA_Standard256_u8[128].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[129].r) / 255.f, static_cast<float>(VGA_Standard256_u8[129].g) / 255.f, static_cast<float>(VGA_Standard256_u8[129].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[130].r) / 255.f, static_cast<float>(VGA_Standard256_u8[130].g) / 255.f, static_cast<float>(VGA_Standard256_u8[130].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[131].r) / 255.f, static_cast<float>(VGA_Standard256_u8[131].g) / 255.f, static_cast<float>(VGA_Standard256_u8[131].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[132].r) / 255.f, static_cast<float>(VGA_Standard256_u8[132].g) / 255.f, static_cast<float>(VGA_Standard256_u8[132].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[133].r) / 255.f, static_cast<float>(VGA_Standard256_u8[133].g) / 255.f, static_cast<float>(VGA_Standard256_u8[133].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[134].r) / 255.f, static_cast<float>(VGA_Standard256_u8[134].g) / 255.f, static_cast<float>(VGA_Standard256_u8[134].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[135].r) / 255.f, static_cast<float>(VGA_Standard256_u8[135].g) / 255.f, static_cast<float>(VGA_Standard256_u8[135].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[136].r) / 255.f, static_cast<float>(VGA_Standard256_u8[136].g) / 255.f, static_cast<float>(VGA_Standard256_u8[136].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[137].r) / 255.f, static_cast<float>(VGA_Standard256_u8[137].g) / 255.f, static_cast<float>(VGA_Standard256_u8[137].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[138].r) / 255.f, static_cast<float>(VGA_Standard256_u8[138].g) / 255.f, static_cast<float>(VGA_Standard256_u8[138].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[139].r) / 255.f, static_cast<float>(VGA_Standard256_u8[139].g) / 255.f, static_cast<float>(VGA_Standard256_u8[139].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[140].r) / 255.f, static_cast<float>(VGA_Standard256_u8[140].g) / 255.f, static_cast<float>(VGA_Standard256_u8[140].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[141].r) / 255.f, static_cast<float>(VGA_Standard256_u8[141].g) / 255.f, static_cast<float>(VGA_Standard256_u8[141].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[142].r) / 255.f, static_cast<float>(VGA_Standard256_u8[142].g) / 255.f, static_cast<float>(VGA_Standard256_u8[142].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[143].r) / 255.f, static_cast<float>(VGA_Standard256_u8[143].g) / 255.f, static_cast<float>(VGA_Standard256_u8[143].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[144].r) / 255.f, static_cast<float>(VGA_Standard256_u8[144].g) / 255.f, static_cast<float>(VGA_Standard256_u8[144].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[145].r) / 255.f, static_cast<float>(VGA_Standard256_u8[145].g) / 255.f, static_cast<float>(VGA_Standard256_u8[145].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[146].r) / 255.f, static_cast<float>(VGA_Standard256_u8[146].g) / 255.f, static_cast<float>(VGA_Standard256_u8[146].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[147].r) / 255.f, static_cast<float>(VGA_Standard256_u8[147].g) / 255.f, static_cast<float>(VGA_Standard256_u8[147].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[148].r) / 255.f, static_cast<float>(VGA_Standard256_u8[148].g) / 255.f, static_cast<float>(VGA_Standard256_u8[148].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[149].r) / 255.f, static_cast<float>(VGA_Standard256_u8[149].g) / 255.f, static_cast<float>(VGA_Standard256_u8[149].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[150].r) / 255.f, static_cast<float>(VGA_Standard256_u8[150].g) / 255.f, static_cast<float>(VGA_Standard256_u8[150].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[151].r) / 255.f, static_cast<float>(VGA_Standard256_u8[151].g) / 255.f, static_cast<float>(VGA_Standard256_u8[151].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[152].r) / 255.f, static_cast<float>(VGA_Standard256_u8[152].g) / 255.f, static_cast<float>(VGA_Standard256_u8[152].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[153].r) / 255.f, static_cast<float>(VGA_Standard256_u8[153].g) / 255.f, static_cast<float>(VGA_Standard256_u8[153].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[154].r) / 255.f, static_cast<float>(VGA_Standard256_u8[154].g) / 255.f, static_cast<float>(VGA_Standard256_u8[154].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[155].r) / 255.f, static_cast<float>(VGA_Standard256_u8[155].g) / 255.f, static_cast<float>(VGA_Standard256_u8[155].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[156].r) / 255.f, static_cast<float>(VGA_Standard256_u8[156].g) / 255.f, static_cast<float>(VGA_Standard256_u8[156].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[157].r) / 255.f, static_cast<float>(VGA_Standard256_u8[157].g) / 255.f, static_cast<float>(VGA_Standard256_u8[157].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[158].r) / 255.f, static_cast<float>(VGA_Standard256_u8[158].g) / 255.f, static_cast<float>(VGA_Standard256_u8[158].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[159].r) / 255.f, static_cast<float>(VGA_Standard256_u8[159].g) / 255.f, static_cast<float>(VGA_Standard256_u8[159].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[160].r) / 255.f, static_cast<float>(VGA_Standard256_u8[160].g) / 255.f, static_cast<float>(VGA_Standard256_u8[160].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[161].r) / 255.f, static_cast<float>(VGA_Standard256_u8[161].g) / 255.f, static_cast<float>(VGA_Standard256_u8[161].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[162].r) / 255.f, static_cast<float>(VGA_Standard256_u8[162].g) / 255.f, static_cast<float>(VGA_Standard256_u8[162].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[163].r) / 255.f, static_cast<float>(VGA_Standard256_u8[163].g) / 255.f, static_cast<float>(VGA_Standard256_u8[163].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[164].r) / 255.f, static_cast<float>(VGA_Standard256_u8[164].g) / 255.f, static_cast<float>(VGA_Standard256_u8[164].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[165].r) / 255.f, static_cast<float>(VGA_Standard256_u8[165].g) / 255.f, static_cast<float>(VGA_Standard256_u8[165].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[166].r) / 255.f, static_cast<float>(VGA_Standard256_u8[166].g) / 255.f, static_cast<float>(VGA_Standard256_u8[166].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[167].r) / 255.f, static_cast<float>(VGA_Standard256_u8[167].g) / 255.f, static_cast<float>(VGA_Standard256_u8[167].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[168].r) / 255.f, static_cast<float>(VGA_Standard256_u8[168].g) / 255.f, static_cast<float>(VGA_Standard256_u8[168].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[169].r) / 255.f, static_cast<float>(VGA_Standard256_u8[169].g) / 255.f, static_cast<float>(VGA_Standard256_u8[169].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[170].r) / 255.f, static_cast<float>(VGA_Standard256_u8[170].g) / 255.f, static_cast<float>(VGA_Standard256_u8[170].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[171].r) / 255.f, static_cast<float>(VGA_Standard256_u8[171].g) / 255.f, static_cast<float>(VGA_Standard256_u8[171].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[172].r) / 255.f, static_cast<float>(VGA_Standard256_u8[172].g) / 255.f, static_cast<float>(VGA_Standard256_u8[172].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[173].r) / 255.f, static_cast<float>(VGA_Standard256_u8[173].g) / 255.f, static_cast<float>(VGA_Standard256_u8[173].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[174].r) / 255.f, static_cast<float>(VGA_Standard256_u8[174].g) / 255.f, static_cast<float>(VGA_Standard256_u8[174].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[175].r) / 255.f, static_cast<float>(VGA_Standard256_u8[175].g) / 255.f, static_cast<float>(VGA_Standard256_u8[175].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[176].r) / 255.f, static_cast<float>(VGA_Standard256_u8[176].g) / 255.f, static_cast<float>(VGA_Standard256_u8[176].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[177].r) / 255.f, static_cast<float>(VGA_Standard256_u8[177].g) / 255.f, static_cast<float>(VGA_Standard256_u8[177].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[178].r) / 255.f, static_cast<float>(VGA_Standard256_u8[178].g) / 255.f, static_cast<float>(VGA_Standard256_u8[178].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[179].r) / 255.f, static_cast<float>(VGA_Standard256_u8[179].g) / 255.f, static_cast<float>(VGA_Standard256_u8[179].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[180].r) / 255.f, static_cast<float>(VGA_Standard256_u8[180].g) / 255.f, static_cast<float>(VGA_Standard256_u8[180].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[181].r) / 255.f, static_cast<float>(VGA_Standard256_u8[181].g) / 255.f, static_cast<float>(VGA_Standard256_u8[181].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[182].r) / 255.f, static_cast<float>(VGA_Standard256_u8[182].g) / 255.f, static_cast<float>(VGA_Standard256_u8[182].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[183].r) / 255.f, static_cast<float>(VGA_Standard256_u8[183].g) / 255.f, static_cast<float>(VGA_Standard256_u8[183].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[184].r) / 255.f, static_cast<float>(VGA_Standard256_u8[184].g) / 255.f, static_cast<float>(VGA_Standard256_u8[184].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[185].r) / 255.f, static_cast<float>(VGA_Standard256_u8[185].g) / 255.f, static_cast<float>(VGA_Standard256_u8[185].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[186].r) / 255.f, static_cast<float>(VGA_Standard256_u8[186].g) / 255.f, static_cast<float>(VGA_Standard256_u8[186].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[187].r) / 255.f, static_cast<float>(VGA_Standard256_u8[187].g) / 255.f, static_cast<float>(VGA_Standard256_u8[187].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[188].r) / 255.f, static_cast<float>(VGA_Standard256_u8[188].g) / 255.f, static_cast<float>(VGA_Standard256_u8[188].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[189].r) / 255.f, static_cast<float>(VGA_Standard256_u8[189].g) / 255.f, static_cast<float>(VGA_Standard256_u8[189].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[190].r) / 255.f, static_cast<float>(VGA_Standard256_u8[190].g) / 255.f, static_cast<float>(VGA_Standard256_u8[190].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[191].r) / 255.f, static_cast<float>(VGA_Standard256_u8[191].g) / 255.f, static_cast<float>(VGA_Standard256_u8[191].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[192].r) / 255.f, static_cast<float>(VGA_Standard256_u8[192].g) / 255.f, static_cast<float>(VGA_Standard256_u8[192].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[193].r) / 255.f, static_cast<float>(VGA_Standard256_u8[193].g) / 255.f, static_cast<float>(VGA_Standard256_u8[193].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[194].r) / 255.f, static_cast<float>(VGA_Standard256_u8[194].g) / 255.f, static_cast<float>(VGA_Standard256_u8[194].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[195].r) / 255.f, static_cast<float>(VGA_Standard256_u8[195].g) / 255.f, static_cast<float>(VGA_Standard256_u8[195].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[196].r) / 255.f, static_cast<float>(VGA_Standard256_u8[196].g) / 255.f, static_cast<float>(VGA_Standard256_u8[196].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[197].r) / 255.f, static_cast<float>(VGA_Standard256_u8[197].g) / 255.f, static_cast<float>(VGA_Standard256_u8[197].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[198].r) / 255.f, static_cast<float>(VGA_Standard256_u8[198].g) / 255.f, static_cast<float>(VGA_Standard256_u8[198].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[199].r) / 255.f, static_cast<float>(VGA_Standard256_u8[199].g) / 255.f, static_cast<float>(VGA_Standard256_u8[199].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[200].r) / 255.f, static_cast<float>(VGA_Standard256_u8[200].g) / 255.f, static_cast<float>(VGA_Standard256_u8[200].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[201].r) / 255.f, static_cast<float>(VGA_Standard256_u8[201].g) / 255.f, static_cast<float>(VGA_Standard256_u8[201].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[202].r) / 255.f, static_cast<float>(VGA_Standard256_u8[202].g) / 255.f, static_cast<float>(VGA_Standard256_u8[202].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[203].r) / 255.f, static_cast<float>(VGA_Standard256_u8[203].g) / 255.f, static_cast<float>(VGA_Standard256_u8[203].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[204].r) / 255.f, static_cast<float>(VGA_Standard256_u8[204].g) / 255.f, static_cast<float>(VGA_Standard256_u8[204].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[205].r) / 255.f, static_cast<float>(VGA_Standard256_u8[205].g) / 255.f, static_cast<float>(VGA_Standard256_u8[205].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[206].r) / 255.f, static_cast<float>(VGA_Standard256_u8[206].g) / 255.f, static_cast<float>(VGA_Standard256_u8[206].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[207].r) / 255.f, static_cast<float>(VGA_Standard256_u8[207].g) / 255.f, static_cast<float>(VGA_Standard256_u8[207].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[208].r) / 255.f, static_cast<float>(VGA_Standard256_u8[208].g) / 255.f, static_cast<float>(VGA_Standard256_u8[208].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[209].r) / 255.f, static_cast<float>(VGA_Standard256_u8[209].g) / 255.f, static_cast<float>(VGA_Standard256_u8[209].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[210].r) / 255.f, static_cast<float>(VGA_Standard256_u8[210].g) / 255.f, static_cast<float>(VGA_Standard256_u8[210].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[211].r) / 255.f, static_cast<float>(VGA_Standard256_u8[211].g) / 255.f, static_cast<float>(VGA_Standard256_u8[211].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[212].r) / 255.f, static_cast<float>(VGA_Standard256_u8[212].g) / 255.f, static_cast<float>(VGA_Standard256_u8[212].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[213].r) / 255.f, static_cast<float>(VGA_Standard256_u8[213].g) / 255.f, static_cast<float>(VGA_Standard256_u8[213].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[214].r) / 255.f, static_cast<float>(VGA_Standard256_u8[214].g) / 255.f, static_cast<float>(VGA_Standard256_u8[214].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[215].r) / 255.f, static_cast<float>(VGA_Standard256_u8[215].g) / 255.f, static_cast<float>(VGA_Standard256_u8[215].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[216].r) / 255.f, static_cast<float>(VGA_Standard256_u8[216].g) / 255.f, static_cast<float>(VGA_Standard256_u8[216].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[217].r) / 255.f, static_cast<float>(VGA_Standard256_u8[217].g) / 255.f, static_cast<float>(VGA_Standard256_u8[217].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[218].r) / 255.f, static_cast<float>(VGA_Standard256_u8[218].g) / 255.f, static_cast<float>(VGA_Standard256_u8[218].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[219].r) / 255.f, static_cast<float>(VGA_Standard256_u8[219].g) / 255.f, static_cast<float>(VGA_Standard256_u8[219].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[220].r) / 255.f, static_cast<float>(VGA_Standard256_u8[220].g) / 255.f, static_cast<float>(VGA_Standard256_u8[220].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[221].r) / 255.f, static_cast<float>(VGA_Standard256_u8[221].g) / 255.f, static_cast<float>(VGA_Standard256_u8[221].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[222].r) / 255.f, static_cast<float>(VGA_Standard256_u8[222].g) / 255.f, static_cast<float>(VGA_Standard256_u8[222].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[223].r) / 255.f, static_cast<float>(VGA_Standard256_u8[223].g) / 255.f, static_cast<float>(VGA_Standard256_u8[223].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[224].r) / 255.f, static_cast<float>(VGA_Standard256_u8[224].g) / 255.f, static_cast<float>(VGA_Standard256_u8[224].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[225].r) / 255.f, static_cast<float>(VGA_Standard256_u8[225].g) / 255.f, static_cast<float>(VGA_Standard256_u8[225].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[226].r) / 255.f, static_cast<float>(VGA_Standard256_u8[226].g) / 255.f, static_cast<float>(VGA_Standard256_u8[226].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[227].r) / 255.f, static_cast<float>(VGA_Standard256_u8[227].g) / 255.f, static_cast<float>(VGA_Standard256_u8[227].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[228].r) / 255.f, static_cast<float>(VGA_Standard256_u8[228].g) / 255.f, static_cast<float>(VGA_Standard256_u8[228].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[229].r) / 255.f, static_cast<float>(VGA_Standard256_u8[229].g) / 255.f, static_cast<float>(VGA_Standard256_u8[229].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[230].r) / 255.f, static_cast<float>(VGA_Standard256_u8[230].g) / 255.f, static_cast<float>(VGA_Standard256_u8[230].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[231].r) / 255.f, static_cast<float>(VGA_Standard256_u8[231].g) / 255.f, static_cast<float>(VGA_Standard256_u8[231].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[232].r) / 255.f, static_cast<float>(VGA_Standard256_u8[232].g) / 255.f, static_cast<float>(VGA_Standard256_u8[232].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[233].r) / 255.f, static_cast<float>(VGA_Standard256_u8[233].g) / 255.f, static_cast<float>(VGA_Standard256_u8[233].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[234].r) / 255.f, static_cast<float>(VGA_Standard256_u8[234].g) / 255.f, static_cast<float>(VGA_Standard256_u8[234].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[235].r) / 255.f, static_cast<float>(VGA_Standard256_u8[235].g) / 255.f, static_cast<float>(VGA_Standard256_u8[235].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[236].r) / 255.f, static_cast<float>(VGA_Standard256_u8[236].g) / 255.f, static_cast<float>(VGA_Standard256_u8[236].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[237].r) / 255.f, static_cast<float>(VGA_Standard256_u8[237].g) / 255.f, static_cast<float>(VGA_Standard256_u8[237].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[238].r) / 255.f, static_cast<float>(VGA_Standard256_u8[238].g) / 255.f, static_cast<float>(VGA_Standard256_u8[238].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[239].r) / 255.f, static_cast<float>(VGA_Standard256_u8[239].g) / 255.f, static_cast<float>(VGA_Standard256_u8[239].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[240].r) / 255.f, static_cast<float>(VGA_Standard256_u8[240].g) / 255.f, static_cast<float>(VGA_Standard256_u8[240].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[241].r) / 255.f, static_cast<float>(VGA_Standard256_u8[241].g) / 255.f, static_cast<float>(VGA_Standard256_u8[241].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[242].r) / 255.f, static_cast<float>(VGA_Standard256_u8[242].g) / 255.f, static_cast<float>(VGA_Standard256_u8[242].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[243].r) / 255.f, static_cast<float>(VGA_Standard256_u8[243].g) / 255.f, static_cast<float>(VGA_Standard256_u8[243].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[244].r) / 255.f, static_cast<float>(VGA_Standard256_u8[244].g) / 255.f, static_cast<float>(VGA_Standard256_u8[244].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[245].r) / 255.f, static_cast<float>(VGA_Standard256_u8[245].g) / 255.f, static_cast<float>(VGA_Standard256_u8[245].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[246].r) / 255.f, static_cast<float>(VGA_Standard256_u8[246].g) / 255.f, static_cast<float>(VGA_Standard256_u8[246].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[247].r) / 255.f, static_cast<float>(VGA_Standard256_u8[247].g) / 255.f, static_cast<float>(VGA_Standard256_u8[247].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[248].r) / 255.f, static_cast<float>(VGA_Standard256_u8[248].g) / 255.f, static_cast<float>(VGA_Standard256_u8[248].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[249].r) / 255.f, static_cast<float>(VGA_Standard256_u8[249].g) / 255.f, static_cast<float>(VGA_Standard256_u8[249].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[250].r) / 255.f, static_cast<float>(VGA_Standard256_u8[250].g) / 255.f, static_cast<float>(VGA_Standard256_u8[250].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[251].r) / 255.f, static_cast<float>(VGA_Standard256_u8[251].g) / 255.f, static_cast<float>(VGA_Standard256_u8[251].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[252].r) / 255.f, static_cast<float>(VGA_Standard256_u8[252].g) / 255.f, static_cast<float>(VGA_Standard256_u8[252].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[253].r) / 255.f, static_cast<float>(VGA_Standard256_u8[253].g) / 255.f, static_cast<float>(VGA_Standard256_u8[253].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[254].r) / 255.f, static_cast<float>(VGA_Standard256_u8[254].g) / 255.f, static_cast<float>(VGA_Standard256_u8[254].b) / 255.f },
    { static_cast<float>(VGA_Standard256_u8[255].r) / 255.f, static_cast<float>(VGA_Standard256_u8[255].g) / 255.f, static_cast<float>(VGA_Standard256_u8[255].b) / 255.f }
}};



template <typename T>
class is_VGA_RETRO_PALETTE
{
    /**
    * PALETTE type
    */
    template <typename TT,
        typename std::enable_if<
        std::is_same<TT, VGA_Palette16>::value ||
        std::is_same<TT, VGA_Palette256>::value ||
        std::is_same<TT, VGA_Palette16F32>::value ||
        std::is_same<TT, VGA_Palette256F32>::value>::type* = nullptr>
        static auto test(int)->std::true_type;

    template<typename>
    static auto test(...)->std::false_type;

public:
    static constexpr const bool value = decltype(test<T>(0))::value;
};


#endif // __IMAGE_LAB_RETRO_VISION_PALETTE_VGA_VALUES__