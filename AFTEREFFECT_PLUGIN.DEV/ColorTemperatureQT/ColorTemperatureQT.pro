# --- YourProjectName.pro --- (e.g., ColorTemperatureQT.pro)

# 1. Specify the output type as a static library
TEMPLATE = lib
CONFIG += staticlib

# 2. Specify Qt modules needed by THIS library
QT += core gui widgets

# 3. Enable C++14 standard
CONFIG += c++14

# 4. Define the target name for the output .lib file
TARGET = ColorTemperatureQT # Or CCTColorBarLib, match your .pro filename

# 5. Define the directory for public headers
INCLUDEPATH += $$PWD/include

# 6. --- Header Files ---
HEADERS += \
    include/abstractcolorbargenerator.h \
    include/customcolorbarwidget.h \
    include/mycctcolorgenerator.h

# 7. --- Source Files ---
SOURCES += \
    src/customcolorbarwidget.cpp \
    src/mycctcolorgenerator.cpp

# -----------------------------------------------------------------------------
# 8. --- Output Directory Configuration ---
# -----------------------------------------------------------------------------

# Get the absolute path of the directory containing the .pro file
# $$PWD is the current directory (where .pro file is)
# $$absolute_path() makes it an absolute path
PROJECT_DIR = $$absolute_path($$PWD)

# Define the root for all build outputs, one level up from the project directory
BUILD_OUT_ROOT = $$PROJECT_DIR/..

# --- Library Output Directory (DESTDIR) ---
# This variable controls where the final library (.lib) file is placed.
# We need to handle Debug and Release configurations separately.

# For Release configuration
CONFIG(release, debug|release) {
    DESTDIR = $$BUILD_OUT_ROOT/BUILD.OUT/LIB/Release
}
# For Debug configuration
CONFIG(debug, debug|release) {
    DESTDIR = $$BUILD_OUT_ROOT/BUILD.OUT/LIB/Debug
}

# --- Temporary Build Files Directories ---
# These control where intermediate files like object files (.obj),
# moc generated files, etc., are placed.

# Common base for temporary files
TEMP_BASE_DIR = $$BUILD_OUT_ROOT/BUILD.OUT/TEMP/$$TARGET # Using TARGET for project name subfolder

# For Release configuration
CONFIG(release, debug|release) {
    OBJECTS_DIR = $$TEMP_BASE_DIR/Release/obj
    MOC_DIR     = $$TEMP_BASE_DIR/Release/moc
    RCC_DIR     = $$TEMP_BASE_DIR/Release/rcc  # If you add .qrc files
    UI_DIR      = $$TEMP_BASE_DIR/Release/ui   # If you add .ui files
}
# For Debug configuration
CONFIG(debug, debug|release) {
    OBJECTS_DIR = $$TEMP_BASE_DIR/Debug/obj
    MOC_DIR     = $$TEMP_BASE_DIR/Debug/moc
    RCC_DIR     = $$TEMP_BASE_DIR/Debug/rcc
    UI_DIR      = $$TEMP_BASE_DIR/Debug/ui
}

# Ensure the destination directories exist.
# qmake doesn't create these, but the build tool (nmake/jom/msbuild) might.
# However, it's good practice if you were scripting further.
# For Visual Studio projects generated by qmake, MSBuild will typically create them.

# Optional: Precompiled Header (PCH)
# PRECOMPILED_HEADER = include/pch.h
# PRECOMPILED_SOURCE = src/pch.cpp
# HEADERS += include/pch.h
# SOURCES += src/pch.cpp